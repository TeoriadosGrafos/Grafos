/*
 Trabalho de Teoria dos Grafos
 Alunos: Ana Carolyne G. França, Henry Candido, Juliana de O. Maciel.
 Professor: Daves Martins
 Disciplina: Teoria dos Grafos
 
 */
package grafosxml;

import com.mxgraph.model.mxCell;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.HashSet;

public class Algoritmos extends javax.swing.JFrame {

    Grafo grafo;

    List<No> listaNos = new ArrayList<No>();
    List<Aresta> listaArestas = new ArrayList<Aresta>();
    String nomeAresta;
    String origemAresta;
    String destinoAresta;
    
    List<List<No>> listaAdjacenciaNos = new ArrayList<List<No>>();
    List<No> nosVisitados = new ArrayList<No>();
    List<No> todosNos = new ArrayList<No>();
    List<No> nosDestino = new ArrayList<No>();
    List<No> nosOrigem = new ArrayList<No>();

    protected static mxGraph graph = new mxGraph();
    protected static HashMap m = new HashMap();
    private mxGraphComponent graphComponent;
    private mxCell cell = null;

    public static HashMap getM() {
        return m;
    }

    public static mxGraph getGraph() {
        return graph;
    }

    Object parent;

    public Algoritmos() {
        initComponents();
        setLocationRelativeTo(null); // deixa a janela no centro da tela

        parent = graph.getDefaultParent();
        graphComponent = new mxGraphComponent(graph);

        graphComponent.setPreferredSize(new Dimension(10, 10));
        graphComponent.setBackground(Color.WHITE);
        graphComponent.setComponentPopupMenu(popupMenu);
        jPanel1.add(graphComponent);

        graphComponent.getGraphControl().addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent e) {
                cell = (mxCell) graphComponent.getCellAt(e.getX(), e.getY());
            }
        });
        getContentPane().setBackground(Color.white);

        graphComponent.validate();
        graphComponent.repaint();
        jPanel1.validate();
        jPanel1.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        Remover = new javax.swing.JMenuItem();
        abc = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jButtonLimparTela = new javax.swing.JButton();
        jBAbrirGrafo = new javax.swing.JButton();
        jTNomeGrafo = new javax.swing.JTextField();
        jBFechar = new javax.swing.JButton();
        jBDijkstra = new javax.swing.JButton();
        jBKruskal = new javax.swing.JButton();
        jBPrim = new javax.swing.JButton();
        jButtonMalgrange = new javax.swing.JButton();
        jButtonTopologica = new javax.swing.JButton();
        jButtonFulkerson = new javax.swing.JButton();
        jButtonProfundidade = new javax.swing.JButton();

        Remover.setText("Remover");
        Remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoverActionPerformed(evt);
            }
        });
        popupMenu.add(Remover);

        abc.setText("Cor");
        popupMenu.add(abc);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setComponentPopupMenu(popupMenu);
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 10));

        jButtonLimparTela.setBackground(new java.awt.Color(0, 0, 0));
        jButtonLimparTela.setFont(new java.awt.Font("Trajan Pro", 1, 11)); // NOI18N
        jButtonLimparTela.setForeground(new java.awt.Color(255, 255, 255));
        jButtonLimparTela.setText("Limpar Tela");
        jButtonLimparTela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparTelaActionPerformed(evt);
            }
        });

        jBAbrirGrafo.setBackground(new java.awt.Color(0, 0, 0));
        jBAbrirGrafo.setFont(new java.awt.Font("Trajan Pro", 1, 12)); // NOI18N
        jBAbrirGrafo.setForeground(new java.awt.Color(255, 255, 255));
        jBAbrirGrafo.setText("Abrir Grafo");
        jBAbrirGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAbrirGrafoActionPerformed(evt);
            }
        });

        jTNomeGrafo.setEnabled(false);

        jBFechar.setBackground(new java.awt.Color(255, 51, 51));
        jBFechar.setFont(new java.awt.Font("Trajan Pro", 1, 11)); // NOI18N
        jBFechar.setText("Fechar");
        jBFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFecharActionPerformed(evt);
            }
        });

        jBDijkstra.setBackground(new java.awt.Color(0, 0, 0));
        jBDijkstra.setFont(new java.awt.Font("Trajan Pro", 1, 11)); // NOI18N
        jBDijkstra.setForeground(new java.awt.Color(255, 255, 255));
        jBDijkstra.setText("Dijkstra");
        jBDijkstra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDijkstraActionPerformed(evt);
            }
        });

        jBKruskal.setBackground(new java.awt.Color(0, 0, 0));
        jBKruskal.setFont(new java.awt.Font("Trajan Pro", 1, 11)); // NOI18N
        jBKruskal.setForeground(new java.awt.Color(255, 255, 255));
        jBKruskal.setText("Kruskal");
        jBKruskal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBKruskalActionPerformed(evt);
            }
        });

        jBPrim.setBackground(new java.awt.Color(0, 0, 0));
        jBPrim.setFont(new java.awt.Font("Trajan Pro", 1, 11)); // NOI18N
        jBPrim.setForeground(new java.awt.Color(255, 255, 255));
        jBPrim.setText("Prim");
        jBPrim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPrimActionPerformed(evt);
            }
        });

        jButtonMalgrange.setBackground(new java.awt.Color(0, 0, 0));
        jButtonMalgrange.setFont(new java.awt.Font("Trajan Pro", 1, 11)); // NOI18N
        jButtonMalgrange.setForeground(new java.awt.Color(255, 255, 255));
        jButtonMalgrange.setText("Malgrange");
        jButtonMalgrange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMalgrangeActionPerformed(evt);
            }
        });

        jButtonTopologica.setBackground(new java.awt.Color(0, 0, 0));
        jButtonTopologica.setFont(new java.awt.Font("Trajan Pro", 1, 11)); // NOI18N
        jButtonTopologica.setForeground(new java.awt.Color(255, 255, 255));
        jButtonTopologica.setText("Topológica");
        jButtonTopologica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopologicaActionPerformed(evt);
            }
        });

        jButtonFulkerson.setBackground(new java.awt.Color(0, 0, 0));
        jButtonFulkerson.setFont(new java.awt.Font("Trajan Pro", 1, 11)); // NOI18N
        jButtonFulkerson.setForeground(new java.awt.Color(255, 255, 255));
        jButtonFulkerson.setText(" Fulkerson");
        jButtonFulkerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFulkersonActionPerformed(evt);
            }
        });

        jButtonProfundidade.setBackground(new java.awt.Color(0, 0, 0));
        jButtonProfundidade.setFont(new java.awt.Font("Trajan Pro", 1, 11)); // NOI18N
        jButtonProfundidade.setForeground(new java.awt.Color(255, 255, 255));
        jButtonProfundidade.setText("Profundidade");
        jButtonProfundidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProfundidadeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonLimparTela))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(jTNomeGrafo, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBAbrirGrafo))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBDijkstra)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBKruskal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBPrim)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonMalgrange)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonTopologica)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonProfundidade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonFulkerson)))
                        .addGap(0, 59, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBFechar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTNomeGrafo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBAbrirGrafo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jBFechar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBDijkstra, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBKruskal, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBPrim, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMalgrange, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTopologica, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonProfundidade, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFulkerson, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLimparTela, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(788, 525));
        setLocationRelativeTo(null);
    }// </editor-fold>                        

   
    private void jButtonLimparTelaActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        graph.removeCells(graphComponent.getCells(new Rectangle(0, 0, graphComponent.getWidth(), graphComponent.getHeight())));
        jTNomeGrafo.setText("");
    }                                                 

    private void RemoverActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
        graphComponent.setPreferredSize(new Dimension(jPanel1.getWidth() - 10, jPanel1.getHeight() - 10));
        graphComponent.validate();
        graphComponent.repaint();
        jPanel1.validate();
        jPanel1.repaint();
    }                                 

    private void formComponentResized(java.awt.event.ComponentEvent evt) {                                      
        formWindowOpened(null);
    }                                     

    private void jBAbrirGrafoActionPerformed(java.awt.event.ActionEvent evt) {                                             
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(this);
        File xmlFileLer = new File(fileChooser.getSelectedFile().getName());
        jTNomeGrafo.setText(fileChooser.getSelectedFile().getName().substring(0, fileChooser.getSelectedFile().getName().lastIndexOf(".")));
        XStream xstream = new XStream(new DomDriver());
        xstream.processAnnotations(Grafo.class);
        grafo = (Grafo) xstream.fromXML(xmlFileLer);
        grafo.geraMatriz();
        grafo.geraMatrizIncidencia();
        String xml = xstream.toXML(grafo);
        System.out.println(xml);
        listaNos.clear();
        listaArestas.clear();

        for (No n : grafo.getNos()) {
            listaNos.add(n);
        }
        for (Aresta a : grafo.getArestas()) {
            listaArestas.add(a);
        }
        grafo.setNos(listaNos);
        grafo.setArestas(listaArestas);
        grafo.mostraGrafoDesign(grafo, grafo.getId(), null);
    }                                            

    private void jBFecharActionPerformed(java.awt.event.ActionEvent evt) {                                         
        graph.removeCells(graphComponent.getCells(new Rectangle(0, 0, graphComponent.getWidth(), graphComponent.getHeight())));
        setVisible(false);
    }                                        

    private void jBKruskalActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // PARTE 1: PEGA OS DADOS DO GRAFO ABERTO E CRIA UM NOVO GRAFO IDÊNTICO PARA SER MANIPULADO.
        Grafo g = grafo.copiaGrafo(grafo, grafo.getId()+"-kruskal");   
        // PARTE 2: LIMPA A TELA.
        graph.removeCells(graphComponent.getCells(new Rectangle(0, 0, graphComponent.getWidth(), graphComponent.getHeight())));
        jTNomeGrafo.setText("");
        // PARTE 3: APLICA O ALGORITMO PARA ESCOLHER AS ARESTAS.
        List<Aresta> arestasOrdenadas = new ArrayList<Aresta>();
        List<Aresta> novasArestas = new ArrayList<Aresta>();
        List<No> nosLigados = new ArrayList<No>();
        List<No> nosSoltos = new ArrayList<No>();
        for(Aresta are : g.getArestas()){
            arestasOrdenadas.add(are);
        }
        Collections.sort(arestasOrdenadas);
        int j = 0;
        while(novasArestas.size()<(g.getNos().size()-1) && arestasOrdenadas.size() != j){
            for(Aresta ares : arestasOrdenadas){
                if(novasArestas.size() == 0){
                    nosLigados.add(g.getNoById(ares.getOrigem()));
                    nosLigados.add(g.getNoById(ares.getDestino()));
                    novasArestas.add(ares);
                    j++;
                }
                else{
                    if(nosLigados.contains(g.getNoById(ares.getOrigem())) || nosLigados.contains(g.getNoById(ares.getDestino()))){
                        if(nosLigados.contains(g.getNoById(ares.getOrigem())) && nosLigados.contains(g.getNoById(ares.getDestino()))){
                            if((nosSoltos.contains(g.getNoById(ares.getOrigem())) && !nosSoltos.contains(g.getNoById(ares.getDestino()))) || (nosSoltos.contains(g.getNoById(ares.getDestino())) && !nosSoltos.contains(g.getNoById(ares.getOrigem())))){
                                novasArestas.add(ares);
                                j++;
                                nosSoltos.clear();
                            }
                        }
                        else{
                            if(!nosSoltos.contains(g.getNoById(ares.getOrigem())) && !nosSoltos.contains(g.getNoById(ares.getDestino()))){
                                novasArestas.add(ares);
                                j++;
                                if(!nosLigados.contains(g.getNoById(ares.getOrigem())))
                                    nosLigados.add(g.getNoById(ares.getOrigem()));
                                if(!nosLigados.contains(g.getNoById(ares.getDestino())))
                                    nosLigados.add(g.getNoById(ares.getDestino()));
                            }
                            else{
                                novasArestas.add(ares);
                                j++;
                                if(!nosSoltos.contains(g.getNoById(ares.getOrigem()))){
                                    nosSoltos.add(g.getNoById(ares.getOrigem()));
                                    nosLigados.add(g.getNoById(ares.getOrigem()));
                                }
                                if(!nosSoltos.contains(g.getNoById(ares.getDestino()))){
                                    nosSoltos.add(g.getNoById(ares.getDestino()));
                                    nosLigados.add(g.getNoById(ares.getDestino()));
                                }
                            }
                        }   
                    }
                    else{
                        novasArestas.add(ares);
                        j++;
                        nosLigados.add(g.getNoById(ares.getOrigem()));
                        nosLigados.add(g.getNoById(ares.getDestino()));
                        nosSoltos.add(g.getNoById(ares.getOrigem()));
                        nosSoltos.add(g.getNoById(ares.getDestino()));
                    }
                }
            }
        }
        g.getArestas().clear();
        g.setArestas(novasArestas);
        // PARTE 4: VISUALIZA O NOVO GRAFO.
        g.mostraGrafoDesign(g, "kruskal", null);
        jTNomeGrafo.setText(g.getId());
        JOptionPane.showMessageDialog(null, "Árvore geradora mínima pelo \n algoritmo de Kruskal");
        // PARTE 5: SALVA O GRAFO EM XML.
        g.salvaGrafo(g);
    }      
